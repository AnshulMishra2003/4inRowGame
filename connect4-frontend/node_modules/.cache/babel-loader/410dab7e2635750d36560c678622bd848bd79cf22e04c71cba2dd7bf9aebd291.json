{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\OneDrive\\\\Desktop\\\\Assignment\\\\connect4-frontend2\\\\src\\\\components\\\\GameBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport socket from \"../socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setInGame\n}) => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    username,\n    gameId,\n    opponent: initialOpponent,\n    turn: initialTurn\n  } = location.state || {};\n  const [board, setBoard] = useState(Array.from({\n    length: 6\n  }, () => Array(7).fill(null)));\n  const [isMyTurn, setIsMyTurn] = useState(initialTurn === username);\n  const [opponent, setOpponent] = useState(initialOpponent);\n  const [gameOver, setGameOver] = useState(false);\n  const makeMove = col => {\n    if (!gameId || !isMyTurn || gameOver) return;\n    socket.emit(\"makeMove\", {\n      gameId,\n      column: col\n    });\n  };\n  useEffect(() => {\n    const handleMoveMade = ({\n      board,\n      turn\n    }) => {\n      setBoard([...board]);\n      setIsMyTurn(turn === username);\n    };\n    const handleGameOver = ({\n      winner,\n      draw\n    }) => {\n      setGameOver(true);\n      setTimeout(() => {\n        if (draw) {\n          alert(\"ü§ù It's a draw!\");\n        } else if (winner === username) {\n          alert(\"üèÜ You win!\");\n        } else {\n          alert(`üòû ${winner} wins.`);\n        }\n        setInGame(false);\n        navigate(\"/\");\n      }, 300);\n    };\n    const handlePlayerDisconnected = ({\n      message\n    }) => {\n      alert(message);\n    };\n    const handlePlayerRejoined = ({\n      message\n    }) => {\n      alert(message);\n    };\n    socket.on(\"moveMade\", handleMoveMade);\n    socket.on(\"gameOver\", handleGameOver);\n    socket.on(\"playerDisconnected\", handlePlayerDisconnected);\n    socket.on(\"playerRejoined\", handlePlayerRejoined);\n    return () => {\n      socket.off(\"moveMade\", handleMoveMade);\n      socket.off(\"gameOver\", handleGameOver);\n      socket.off(\"playerDisconnected\", handlePlayerDisconnected);\n      socket.off(\"playerRejoined\", handlePlayerRejoined);\n    };\n  }, [username, navigate, setInGame, gameId, gameOver]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      padding: \"20px\",\n      minHeight: \"100vh\",\n      backgroundColor: \"#f0f4f8\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontSize: \"28px\",\n        marginBottom: \"10px\"\n      },\n      children: \"Connect4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Your Turn:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: isMyTurn ? \"#22c55e\" : \"#f97316\",\n          fontWeight: \"bold\"\n        },\n        children: isMyTurn ? \"‚úÖ Your Move\" : \"‚è≥ Waiting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Playing against: \", opponent || \"Bot\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(7, 50px)\",\n        gridGap: \"5px\",\n        marginTop: \"20px\"\n      },\n      children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => makeMove(colIndex),\n        style: {\n          width: \"50px\",\n          height: \"50px\",\n          backgroundColor: \"#0284c7\",\n          borderRadius: \"50%\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          cursor: isMyTurn && !gameOver ? \"pointer\" : \"not-allowed\",\n          border: \"2px solid #0ea5e9\"\n        },\n        children: cell && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"40px\",\n            height: \"40px\",\n            borderRadius: \"50%\",\n            backgroundColor: cell === \"red\" ? \"#dc2626\" : \"#facc15\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"xxpUo+3NTZI0fdfQqNte91sPItY=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","socket","jsxDEV","_jsxDEV","GameBoard","setInGame","_s","location","navigate","username","gameId","opponent","initialOpponent","turn","initialTurn","state","board","setBoard","Array","from","length","fill","isMyTurn","setIsMyTurn","setOpponent","gameOver","setGameOver","makeMove","col","emit","column","handleMoveMade","handleGameOver","winner","draw","setTimeout","alert","handlePlayerDisconnected","message","handlePlayerRejoined","on","off","style","display","flexDirection","alignItems","padding","minHeight","backgroundColor","children","fontSize","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","fontWeight","gridTemplateColumns","gridGap","marginTop","map","row","rowIndex","cell","colIndex","onClick","width","height","borderRadius","justifyContent","cursor","border","_c","$RefreshReg$"],"sources":["C:/Users/dell/OneDrive/Desktop/Assignment/connect4-frontend2/src/components/GameBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport socket from \"../socket\";\r\n\r\nconst GameBoard = ({ setInGame }) => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { username, gameId, opponent: initialOpponent, turn: initialTurn } = location.state || {};\r\n\r\n  const [board, setBoard] = useState(Array.from({ length: 6 }, () => Array(7).fill(null)));\r\n  const [isMyTurn, setIsMyTurn] = useState(initialTurn === username);\r\n  const [opponent, setOpponent] = useState(initialOpponent);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const makeMove = (col) => {\r\n    if (!gameId || !isMyTurn || gameOver) return;\r\n    socket.emit(\"makeMove\", { gameId, column: col });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleMoveMade = ({ board, turn }) => {\r\n      setBoard([...board]);\r\n      setIsMyTurn(turn === username);\r\n    };\r\n\r\n    const handleGameOver = ({ winner, draw }) => {\r\n      setGameOver(true);\r\n      setTimeout(() => {\r\n        if (draw) {\r\n          alert(\"ü§ù It's a draw!\");\r\n        } else if (winner === username) {\r\n          alert(\"üèÜ You win!\");\r\n        } else {\r\n          alert(`üòû ${winner} wins.`);\r\n        }\r\n        setInGame(false);\r\n        navigate(\"/\");\r\n      }, 300);\r\n    };\r\n\r\n    const handlePlayerDisconnected = ({ message }) => {\r\n      alert(message);\r\n    };\r\n\r\n    const handlePlayerRejoined = ({ message }) => {\r\n      alert(message);\r\n    };\r\n\r\n    socket.on(\"moveMade\", handleMoveMade);\r\n    socket.on(\"gameOver\", handleGameOver);\r\n    socket.on(\"playerDisconnected\", handlePlayerDisconnected);\r\n    socket.on(\"playerRejoined\", handlePlayerRejoined);\r\n\r\n    return () => {\r\n      socket.off(\"moveMade\", handleMoveMade);\r\n      socket.off(\"gameOver\", handleGameOver);\r\n      socket.off(\"playerDisconnected\", handlePlayerDisconnected);\r\n      socket.off(\"playerRejoined\", handlePlayerRejoined);\r\n    };\r\n  }, [username, navigate, setInGame, gameId, gameOver]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        padding: \"20px\",\r\n        minHeight: \"100vh\",\r\n        backgroundColor: \"#f0f4f8\",\r\n      }}\r\n    >\r\n      <h2 style={{ fontSize: \"28px\", marginBottom: \"10px\" }}>Connect4</h2>\r\n      <h3>\r\n        Your Turn:{\" \"}\r\n        <span style={{ color: isMyTurn ? \"#22c55e\" : \"#f97316\", fontWeight: \"bold\" }}>\r\n          {isMyTurn ? \"‚úÖ Your Move\" : \"‚è≥ Waiting\"}\r\n        </span>\r\n      </h3>\r\n      <h4>Playing against: {opponent || \"Bot\"}</h4>\r\n\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(7, 50px)\",\r\n          gridGap: \"5px\",\r\n          marginTop: \"20px\",\r\n        }}\r\n      >\r\n        {board.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => (\r\n            <div\r\n              key={`${rowIndex}-${colIndex}`}\r\n              onClick={() => makeMove(colIndex)}\r\n              style={{\r\n                width: \"50px\",\r\n                height: \"50px\",\r\n                backgroundColor: \"#0284c7\",\r\n                borderRadius: \"50%\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                cursor: isMyTurn && !gameOver ? \"pointer\" : \"not-allowed\",\r\n                border: \"2px solid #0ea5e9\",\r\n              }}\r\n            >\r\n              {cell && (\r\n                <div\r\n                  style={{\r\n                    width: \"40px\",\r\n                    height: \"40px\",\r\n                    borderRadius: \"50%\",\r\n                    backgroundColor: cell === \"red\" ? \"#dc2626\" : \"#facc15\",\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}